@import "../vars/layout";
@import "../functions/layout";

/**
* MIXIN MEDIA
* Estandariza las media-queries in-line que no entren en el estandar
* Imprescindible añadir el min o max width ya que no se puede estandarizar.
* Pensar manera de implementarlo.
* Se utilizaría de esta manera:
* .container {
        @include media("retina", "min-width: #{devices(desktop)}") {
            color: $white;
        }
        // Tamaño no registrado
        @include media("retina", "min-width: 840px") {
            color: $white;
        }
    }
*/
@mixin media($args...) {
    $query: "";
    @each $arg in $args {
        $op: "";
        @if ($query != "") {
            $op: " and ";
        }
        $query: $query + $op + translate-media-condition($arg);
    }
    @media #{$query} {
        @content;
    }
}

/**
* MIXIN (mobile-xs|mobile|tablet|desktop|desktop-xl)
* Estandariza las media-queries in-line que entren en el estandar
* Se utilizaría de esta manera:
* .container {
        margin-top: spacing(large);
*       @include tablet{
*           margin-top: 48px;
*           color: $white;
*       }
*
*       @include desktop {
*           margin-top: 64px;
*           color: $white;
*       }
*   }
*/
@mixin mobile-xs {
    @media (max-width: #{map-get($devices, mobile) - 1px}) {
        @content;
    }
}

@mixin mobile($hasMax: false) {
    @if $hasMax == true {
        @media (min-width: #{map-get($devices, mobile)}) and (max-width: #{map-get($devices, tablet) - 1px}) {
            @content;
        }
    } @else {
        @media (min-width: #{map-get($devices, mobile)}) {
            @content;
        }
    }
}

@mixin tableta($hasMax: false) {
    @if $hasMax == true {
        @media (min-width: #{map-get($devices, tableta)}) and (max-width: #{map-get($devices, desktop) - 1px}) {
            @content;
        }
    } @else {
        @media (min-width: #{map-get($devices, desktop)}) {
            @content;
        }
    }
}

@mixin desktop($hasMax: false) {
    @if $hasMax == true {
        @media (min-width: #{map-get($devices, desktop)}) and (max-width: #{map-get($devices, desktop-xl) - 1px}) {
            @content;
        }
    } @else {
        @media (min-width: #{map-get($devices, desktop)}) {
            @content;
        }
    }
}

@mixin desktop-xl($hasMax: false) {
    @if $hasMax == true {
        @media (min-width: #{map-get($devices, desktop-xl)}) and (max-width: #{map-get($devices, desktop-xxl) - 1px}) {
            @content;
        }
    } @else {
        @media (min-width: #{map-get($devices, desktop-xl)}) {
            @content;
        }
    }
}


@mixin desktop-xxl {
    @media (min-width: #{map-get($devices, desktop-xxl)}) {
        @content;
    }
}

/**
* Mixin flexBox
* Establece un estandar para el flex-box (Puede que se me pasen cosas, echar un ojo)
* Como se usa:
*   @include flexBox(row, left, center);
*   @include flexBox(row, left, center, devices(desktop)); -- Esta cambiaria el flow al llegar al pto. de ruptura
*/
@mixin flexBox($direction: row, $aligned: center, $just: center, $breakpoint: "", $transform: "") {
    display: flex;
    flex-flow: $direction nowrap;
    align-items: $aligned;
    justify-content: $just;

    @if $breakpoint != "" {
        @include media($transform, "min-width: #{$breakpoint}") {
            @if $direction == row {
                flex-flow: column nowrap;
            } @else {
                flex-flow: row nowrap;
            }
        }
    }
}

@mixin linkStyle($color: $secondary-color) {
    font-weight: 600;
    text-decoration: none;
    color: $color;
}

/**
* Mixin flexBox
* Establece un estandar para el flex-box (Puede que se me pasen cosas, echar un ojo)
* Como se usa:
*   @include flexBox(row, left, center);
*   @include flexBox(row, left, center, devices(desktop)); -- Esta cambiaria el flow al llegar al pto. de ruptura
*/
@mixin fontGenerate($weight: 'Text') {
    height: auto;
    letter-spacing: normal;
    font-family: 'Roboto';
    line-height: normal;
    margin: 0;
    @if $weight == 'Title' {
        font-size: spacing(big);
        font-weight: 600;
    } @else if $weight == 'Subtitle' {
        font-size: spacing(extra);
        font-weight: 600;
    } @else if $weight == "Subtitle-s" {
        font-size: spacing(large);
        font-weight: normal;
    } @else if $weight == "Text-xl" {
        font-size: spacing();
        font-weight: normal;
    } @else if $weight == "Text" {
        font-size: normal();
        font-weight: normal;
    } @else {
        font-size: normal();
        font-weight: normal;
    }
}

@mixin putElementOverAnother($isElementBack: true) {
    @if $isElementBack {
        display: none;
    } @else {
        display: block;
    }
}

@mixin inputStandard($type:'input') {
    width: inherit;
    background: transparent;
    font-size: spacing(normal);
    color: $white-color;
    outline: 0;
    @if $type == 'input' {
        height: 50px;
        border: none;
        border-bottom: 2px solid white;
    } @else if $type == 'textarea' {
        height: 200px;
        border: 2px solid white;
    } @else {
         @error "El campo debe ser tipo 'input' o tipo 'textarea'";
    }

    &::placeholder {
        color: $white-color;
        letter-spacing: 1px;
        padding: spacing(small);
    }

    &::content {
        padding: spacing(small);
    }
}
